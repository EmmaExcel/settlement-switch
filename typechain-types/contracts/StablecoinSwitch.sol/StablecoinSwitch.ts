/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace StablecoinSwitch {
  export type OptimalPathStruct = {
    fromChainId: BigNumberish;
    toChainId: BigNumberish;
    cost: BigNumberish;
    speed: BigNumberish;
    bridge: AddressLike;
    bridgeName: string;
  };

  export type OptimalPathStructOutput = [
    fromChainId: bigint,
    toChainId: bigint,
    cost: bigint,
    speed: bigint,
    bridge: string,
    bridgeName: string
  ] & {
    fromChainId: bigint;
    toChainId: bigint;
    cost: bigint;
    speed: bigint;
    bridge: string;
    bridgeName: string;
  };
}

export interface StablecoinSwitchInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_executeLiFiBridge"
      | "chainlinkBridgeAdapter"
      | "chainlinkRouter"
      | "currentChainId"
      | "customBridgeAdapter"
      | "emergencyWithdraw"
      | "executeSettlement"
      | "getCurrentChainId"
      | "getOptimalPath"
      | "liFiBridgeAdapter"
      | "liFiRouter"
      | "mockRoutes"
      | "owner"
      | "renounceOwnership"
      | "routeTransaction"
      | "setBridgeAdapter"
      | "setChainlinkBridgeAdapter"
      | "setChainlinkRouter"
      | "setLiFiBridgeAdapter"
      | "setLiFiRouter"
      | "transferOwnership"
      | "updateMockRoute"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeAdapterSet"
      | "FallbackToChainlink"
      | "LiFiBridgeFailed"
      | "OwnershipTransferred"
      | "SettlementExecuted"
      | "TransactionRouted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_executeLiFiBridge",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkBridgeAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customBridgeAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSettlement",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptimalPath",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liFiBridgeAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liFiRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockRoutes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routeTransaction",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkBridgeAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiFiBridgeAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiFiRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMockRoute",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "_executeLiFiBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkBridgeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customBridgeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptimalPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liFiBridgeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liFiRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mockRoutes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkBridgeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiFiBridgeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiFiRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMockRoute",
    data: BytesLike
  ): Result;
}

export namespace BridgeAdapterSetEvent {
  export type InputTuple = [
    bridgeType: string,
    adapter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bridgeType: string,
    adapter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    bridgeType: string;
    adapter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackToChainlinkEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike,
    toChainId: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    recipient: string,
    toChainId: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
    toChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiFiBridgeFailedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    recipient: string,
    reason: string
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementExecutedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike,
    toChainId: BigNumberish,
    bridge: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    recipient: string,
    toChainId: bigint,
    bridge: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
    toChainId: bigint;
    bridge: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionRoutedEvent {
  export type InputTuple = [
    user: AddressLike,
    fromToken: AddressLike,
    amount: BigNumberish,
    toChainId: BigNumberish,
    priority: BigNumberish,
    route: StablecoinSwitch.OptimalPathStruct,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    fromToken: string,
    amount: bigint,
    toChainId: bigint,
    priority: bigint,
    route: StablecoinSwitch.OptimalPathStructOutput,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    fromToken: string;
    amount: bigint;
    toChainId: bigint;
    priority: bigint;
    route: StablecoinSwitch.OptimalPathStructOutput;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StablecoinSwitch extends BaseContract {
  connect(runner?: ContractRunner | null): StablecoinSwitch;
  waitForDeployment(): Promise<this>;

  interface: StablecoinSwitchInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _executeLiFiBridge: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike,
      toChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  chainlinkBridgeAdapter: TypedContractMethod<[], [string], "view">;

  chainlinkRouter: TypedContractMethod<[], [string], "view">;

  currentChainId: TypedContractMethod<[], [bigint], "view">;

  customBridgeAdapter: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeSettlement: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike,
      toChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCurrentChainId: TypedContractMethod<[], [bigint], "view">;

  getOptimalPath: TypedContractMethod<
    [
      arg0: AddressLike,
      amount: BigNumberish,
      toChainId: BigNumberish,
      priority: BigNumberish
    ],
    [StablecoinSwitch.OptimalPathStructOutput],
    "view"
  >;

  liFiBridgeAdapter: TypedContractMethod<[], [string], "view">;

  liFiRouter: TypedContractMethod<[], [string], "view">;

  mockRoutes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        costBps: bigint;
        speedSeconds: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  routeTransaction: TypedContractMethod<
    [
      fromToken: AddressLike,
      amount: BigNumberish,
      toChainId: BigNumberish,
      priority: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBridgeAdapter: TypedContractMethod<
    [adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  setChainlinkBridgeAdapter: TypedContractMethod<
    [adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  setChainlinkRouter: TypedContractMethod<
    [router: AddressLike],
    [void],
    "nonpayable"
  >;

  setLiFiBridgeAdapter: TypedContractMethod<
    [adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  setLiFiRouter: TypedContractMethod<
    [router: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMockRoute: TypedContractMethod<
    [
      chainId: BigNumberish,
      costBps: BigNumberish,
      speedSeconds: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_executeLiFiBridge"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike,
      toChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chainlinkBridgeAdapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainlinkRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "customBridgeAdapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeSettlement"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike,
      toChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOptimalPath"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      amount: BigNumberish,
      toChainId: BigNumberish,
      priority: BigNumberish
    ],
    [StablecoinSwitch.OptimalPathStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "liFiBridgeAdapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liFiRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mockRoutes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        costBps: bigint;
        speedSeconds: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "routeTransaction"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      amount: BigNumberish,
      toChainId: BigNumberish,
      priority: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBridgeAdapter"
  ): TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainlinkBridgeAdapter"
  ): TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainlinkRouter"
  ): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiFiBridgeAdapter"
  ): TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiFiRouter"
  ): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMockRoute"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      costBps: BigNumberish,
      speedSeconds: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BridgeAdapterSet"
  ): TypedContractEvent<
    BridgeAdapterSetEvent.InputTuple,
    BridgeAdapterSetEvent.OutputTuple,
    BridgeAdapterSetEvent.OutputObject
  >;
  getEvent(
    key: "FallbackToChainlink"
  ): TypedContractEvent<
    FallbackToChainlinkEvent.InputTuple,
    FallbackToChainlinkEvent.OutputTuple,
    FallbackToChainlinkEvent.OutputObject
  >;
  getEvent(
    key: "LiFiBridgeFailed"
  ): TypedContractEvent<
    LiFiBridgeFailedEvent.InputTuple,
    LiFiBridgeFailedEvent.OutputTuple,
    LiFiBridgeFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SettlementExecuted"
  ): TypedContractEvent<
    SettlementExecutedEvent.InputTuple,
    SettlementExecutedEvent.OutputTuple,
    SettlementExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionRouted"
  ): TypedContractEvent<
    TransactionRoutedEvent.InputTuple,
    TransactionRoutedEvent.OutputTuple,
    TransactionRoutedEvent.OutputObject
  >;

  filters: {
    "BridgeAdapterSet(string,address,uint256)": TypedContractEvent<
      BridgeAdapterSetEvent.InputTuple,
      BridgeAdapterSetEvent.OutputTuple,
      BridgeAdapterSetEvent.OutputObject
    >;
    BridgeAdapterSet: TypedContractEvent<
      BridgeAdapterSetEvent.InputTuple,
      BridgeAdapterSetEvent.OutputTuple,
      BridgeAdapterSetEvent.OutputObject
    >;

    "FallbackToChainlink(address,uint256,address,uint256)": TypedContractEvent<
      FallbackToChainlinkEvent.InputTuple,
      FallbackToChainlinkEvent.OutputTuple,
      FallbackToChainlinkEvent.OutputObject
    >;
    FallbackToChainlink: TypedContractEvent<
      FallbackToChainlinkEvent.InputTuple,
      FallbackToChainlinkEvent.OutputTuple,
      FallbackToChainlinkEvent.OutputObject
    >;

    "LiFiBridgeFailed(address,uint256,address,string)": TypedContractEvent<
      LiFiBridgeFailedEvent.InputTuple,
      LiFiBridgeFailedEvent.OutputTuple,
      LiFiBridgeFailedEvent.OutputObject
    >;
    LiFiBridgeFailed: TypedContractEvent<
      LiFiBridgeFailedEvent.InputTuple,
      LiFiBridgeFailedEvent.OutputTuple,
      LiFiBridgeFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SettlementExecuted(address,uint256,address,uint256,string,uint256)": TypedContractEvent<
      SettlementExecutedEvent.InputTuple,
      SettlementExecutedEvent.OutputTuple,
      SettlementExecutedEvent.OutputObject
    >;
    SettlementExecuted: TypedContractEvent<
      SettlementExecutedEvent.InputTuple,
      SettlementExecutedEvent.OutputTuple,
      SettlementExecutedEvent.OutputObject
    >;

    "TransactionRouted(address,address,uint256,uint256,uint8,tuple,uint256)": TypedContractEvent<
      TransactionRoutedEvent.InputTuple,
      TransactionRoutedEvent.OutputTuple,
      TransactionRoutedEvent.OutputObject
    >;
    TransactionRouted: TypedContractEvent<
      TransactionRoutedEvent.InputTuple,
      TransactionRoutedEvent.OutputTuple,
      TransactionRoutedEvent.OutputObject
    >;
  };
}
