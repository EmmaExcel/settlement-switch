/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ILiFi {
  export type BridgeDataStruct = {
    transactionId: BytesLike;
    bridge: string;
    integrator: string;
    referrer: AddressLike;
    sendingAssetId: AddressLike;
    receiver: AddressLike;
    minAmount: BigNumberish;
    destinationChainId: BigNumberish;
    hasSourceSwaps: boolean;
    hasDestinationCall: boolean;
  };

  export type BridgeDataStructOutput = [
    transactionId: string,
    bridge: string,
    integrator: string,
    referrer: string,
    sendingAssetId: string,
    receiver: string,
    minAmount: bigint,
    destinationChainId: bigint,
    hasSourceSwaps: boolean,
    hasDestinationCall: boolean
  ] & {
    transactionId: string;
    bridge: string;
    integrator: string;
    referrer: string;
    sendingAssetId: string;
    receiver: string;
    minAmount: bigint;
    destinationChainId: bigint;
    hasSourceSwaps: boolean;
    hasDestinationCall: boolean;
  };
}

export interface ILiFiInterface extends Interface {
  getFunction(
    nameOrSignature: "startBridgeTokensViaGenericBridge"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "startBridgeTokensViaGenericBridge",
    values: [ILiFi.BridgeDataStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "startBridgeTokensViaGenericBridge",
    data: BytesLike
  ): Result;
}

export interface ILiFi extends BaseContract {
  connect(runner?: ContractRunner | null): ILiFi;
  waitForDeployment(): Promise<this>;

  interface: ILiFiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  startBridgeTokensViaGenericBridge: TypedContractMethod<
    [_bridgeData: ILiFi.BridgeDataStruct, _genericData: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "startBridgeTokensViaGenericBridge"
  ): TypedContractMethod<
    [_bridgeData: ILiFi.BridgeDataStruct, _genericData: BytesLike],
    [void],
    "payable"
  >;

  filters: {};
}
