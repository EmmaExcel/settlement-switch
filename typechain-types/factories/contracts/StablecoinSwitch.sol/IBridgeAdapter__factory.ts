/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBridgeAdapter,
  IBridgeAdapterInterface,
} from "../../../contracts/StablecoinSwitch.sol/IBridgeAdapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toChainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "bridge",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toChainId",
        type: "uint256",
      },
    ],
    name: "estimateFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IBridgeAdapter__factory {
  static readonly abi = _abi;
  static createInterface(): IBridgeAdapterInterface {
    return new Interface(_abi) as IBridgeAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IBridgeAdapter {
    return new Contract(address, _abi, runner) as unknown as IBridgeAdapter;
  }
}
