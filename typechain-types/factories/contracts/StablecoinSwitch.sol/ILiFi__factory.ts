/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILiFi,
  ILiFiInterface,
} from "../../../contracts/StablecoinSwitch.sol/ILiFi";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        internalType: "struct ILiFi.BridgeData",
        name: "_bridgeData",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_genericData",
        type: "bytes",
      },
    ],
    name: "startBridgeTokensViaGenericBridge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class ILiFi__factory {
  static readonly abi = _abi;
  static createInterface(): ILiFiInterface {
    return new Interface(_abi) as ILiFiInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ILiFi {
    return new Contract(address, _abi, runner) as unknown as ILiFi;
  }
}
